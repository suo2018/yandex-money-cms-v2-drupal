<?php
use YaMoney\Client\YandexMoneyApi;
use YaMoney\Common\Exceptions\ApiException;
use YaMoney\Model\PaymentStatus;
use YaMoney\Request\Payments\CreatePaymentRequest;

$modulePath = drupal_get_path('module', 'yamoney_api');
require_once $modulePath.'/YandexMoneyLogger.php';

/**
 * Implements hook_uc_payment_method().
 *
 * @see uc_payment_method_yamoney_api()
 */
function ya_ubercart_api_uc_payment_method()
{
    $payment_methods = array();
    $icon_name       = (variable_get('yamoney_api_shop', 0) == 0) ? 'yandex-logo' : 'kassa-logo';
    $icon            = theme(
        'image',
        array(
            'path'       => drupal_get_path('module', 'ya_ubercart_api').'/images/'.$icon_name.'.png',
            'attributes' => array('class' => array('ya-ubercart-logo')),
        )
    );

    $display_title = '';
    if (variable_get('yamoney_api_shop', 0)) {
        $display_title = t('Яндекс.Касса (банковские карты, электронные деньги и другое)');
    } else if (variable_get('yamoney_api_p2p', 0)) {
        $display_title = t('Яндекс.Деньги (банковские карты, кошелек)');
    } else if (variable_get('yamoney_api_billing_enable', 0)) {
        $display_title = t('Yandex.Billing (bank card, e-wallets)');
    }

    $display_title                      .= '<br/>'.$icon;
    $payment_methods['ya_ubercart_api'] = array(
        'name'     => t('Yandex money'),
        'title'    => $display_title,
        'review'   => t('Yandex gateway'),
        'desc'     => t('Redirect to Yandex to pay by credit card or pay terminals or e-money.'),
        'callback' => 'uc_payment_method_ya_ubercart_api',
        'redirect' => 'ya_ubercart_api_form',
        'weight'   => 3,
        'checkout' => true,
    );

    return $payment_methods;
}

/**
 * @param array $form
 * @param array $form_state
 * @param $order
 *
 * @return array
 * @throws Exception
 */
function ya_ubercart_api_form($form, &$form_state, $order)
{
    global $user;
    $transaction           = new YAMoneyApiTransaction();
    $transaction->uid      = $user->uid;
    $transaction->amount   = $order->order_total;
    $transaction->mail     = isset($user->mail) ? $user->mail : $order->primary_email;
    $transaction->order_id = $order->order_id;
    $form                  = array();
    if (!yamoney_api_transaction_save($transaction)) {
        $error_message = t('Can not save transaction.');

        // show message to the user
        drupal_set_message(t('Payment failed: %message', array('%message' => $error_message)), 'error');

        // log error to watchdog
        watchdog('ya_ubercart', 'Payment failed: %message', array('%message' => $error_message), WATCHDOG_WARNING);

        // redirect to fail page
        $cancel_url = url('yamoney_api/fail');
        drupal_goto($cancel_url);
    }

    if (variable_get('yamoney_api_billing_enable')) {
        uc_cart_complete_sale($order);
        uc_cart_empty($order->uid);
        uc_order_update_status($order->order_id, 'payment_received');
    }

    if (variable_get('yamoney_api_shop', 1)) {
        if (isset($form_state['input']['confirmation'])) {
            drupal_goto($form_state['input']['confirmation']);
            uc_order_update_status($order->order_id, 'payment_received');
        }

        $modulePath = drupal_get_path('module', 'yamoney_api');
        require_once $modulePath.DIRECTORY_SEPARATOR.'vendor'.DIRECTORY_SEPARATOR.'autoload.php';
        $shopId       = variable_get('yamoney_api_shop_id');
        $shopPassword = variable_get('yamoney_api_secret');
        $apiClient    = new YandexMoneyApi();
        $apiClient->setAuth($shopId, $shopPassword);
        $apiClient->setLogger(new YandexMoneyLogger);

        $amount = $order->order_total;
        if (isset($_SESSION['pay_method'])) {
            $paymentMethod = $_SESSION['pay_method'];
        } else {
            $paymentMethod = '';
        }
        $builder        = getBuilder($order, $amount, $paymentMethod);
        $paymentRequest = $builder->build();

        try {
            $response = $apiClient->createPayment($paymentRequest, $order->order_id.'_'.$paymentMethod);
            if ($response->status !== PaymentStatus::CANCELED) {
                $transaction->uid        = $user->uid;
                $transaction->amount     = $order->order_total;
                $transaction->mail       = isset($user->mail) ? $user->mail : $order->primary_email;
                $transaction->order_id   = $order->order_id;
                $transaction->payment_id = $response->getId();
                if (!yamoney_api_transaction_save($transaction, true)) {
                    $error_message = t('Can not save transaction.');

                    // show message to the user
                    drupal_set_message(t('Payment failed: %message', array('%message' => $error_message)), 'error');

                    // log error to watchdog
                    watchdog(
                        'ya_ubercart',
                        'Payment failed: %message',
                        array('%message' => $error_message),
                        WATCHDOG_WARNING
                    );
                    // redirect to fail page
                    $cancel_url = url('yamoney_api/fail');
                    drupal_goto($cancel_url);
                }

                uc_order_update_status($order->order_id, 'payment_received');
                $confirmationUrl                        = $response->confirmation->confirmationUrl;
                $form['actions']['submit']['#submit'][] = 'ya_ubercart_api_redirect_handler';
                $form['actions']['submit']              = array(
                    '#type'       => 'submit',
                    '#value'      => t('Process payment'),
                    '#attributes' => array('onclick' => "location.href = '{$confirmationUrl}'; return false;"),
                );

                return $form;
            } else {
                drupal_set_message('Невозможно заплатить этим методом', 'error');
            }
        } catch (ApiException $e) {
            YandexMoneyLogger::error('Api error: '.$e->getMessage());
            drupal_set_message('Не удалось заплатить этим методом.', 'error');
        }
    } else {

        $target_url      = yamoney_api_get_order_submission_url();
        $params          = yamoney_api_get_order_submission_params($transaction);
        $form['#action'] = $target_url;
        foreach ($params as $key => $value) {
            if ($key == 'fio') {
                $form[$key] = array(
                    '#type'  => 'hidden',
                    '#value' => $order->data['customer_name'],
                );
            } else {
                $form[$key] = array(
                    '#type'  => 'hidden',
                    '#value' => $value,
                );
            }
        }

        $form['cms_name'] = array(
            '#type'  => 'hidden',
            '#value' => "drupal-ubercart",
        );

        $form['actions']           = array('#type' => 'actions');
        $form['actions']['submit'] = array(
            '#type'  => 'submit',
            '#value' => t('Submit order'),
        );
    }

    return $form;
}

/**
 * @param $order
 * @param $amount
 * @param $paymentMethod
 *
 * @return \YaMoney\Request\Payments\CreatePaymentRequestBuilder
 */
function getBuilder($order, $amount, $paymentMethod)
{
    $confirmationType = \YaMoney\Model\ConfirmationType::REDIRECT;
    if ($paymentMethod == 'alfabank') {
        $confirmationType = \YaMoney\Model\ConfirmationType::EXTERNAL;
        $paymentMethod    = new \YaMoney\Model\PaymentData\PaymentDataAlfabank();
        try {
            $paymentMethod->setLogin($_SESSION['alfabank_login']);
        } catch (Exception $e) {
            drupal_set_message('Поле логин заполнено неверно.', 'error');
        }
    } elseif ($paymentMethod == 'qiwi') {
        $paymentMethod = new \YaMoney\Model\PaymentData\PaymentDataQiwi();
        try {
            $paymentMethod->setPhone($_SESSION['qiwi_phone']);
        } catch (Exception $e) {
            drupal_set_message('Поле телефон заполнено неверно.', 'error');
        }
    }

    $builder = CreatePaymentRequest::builder()
                                   ->setAmount($amount)
                                   ->setPaymentMethodData($paymentMethod)
                                   ->setCapture(false)
                                   ->setConfirmation(
                                       array(
                                           'type'      => $confirmationType,
                                           'returnUrl' => ya_ubercart_api_get_return_url($order),
                                       )
                                   )
                                   ->setMetadata(array(
                                       'cms_name'       => 'ya_api_drupal_ubercart',
                                       'module_version' => YAMONEY_MODULE_VERSION,
                                   ));
    YandexMoneyLogger::info('Return url:'.ya_ubercart_api_get_return_url($order));
    $tax = uc_taxes_uc_calculate_tax($order);
    if (module_exists('uc_taxes') && count($tax) && variable_get('yamoney_api_send_check', false)) {
        $builder->setReceiptEmail($order->primary_email);

        if (count($tax)) {
            $tax = current($tax);
        }

        foreach ($order->products as $product) {
            $tax_id = isset($tax->id) ? $tax->id : 0;
            $tax    = ($tax_id && variable_get('yamoney_api_kassa_tax_'.$tax_id) ? variable_get(
                'yamoney_api_kassa_tax_'.$tax_id
            ) : YAMONEY_API_DEFAULT_TAX_RATE_ID);
            list($amountTax, $suffixes) = uc_taxes_get_included_tax($product, $order);
            $amount = $product->price + $amountTax ? $amountTax : 0;
            $builder->addReceiptItem($product->title, $amount, $product->qty, $tax);
        }

        foreach ($order->line_items as $item) {
            $tax_id = isset($tax->id) ? $tax->id : 0;
            $amount = $item['amount'] * (isset($tax->id) ? (1 + $tax->data['tax_rate']) : 0);
            $tax    = ($tax_id && variable_get('yamoney_api_kassa_tax_'.$tax_id) ? variable_get(
                'yamoney_api_kassa_tax_'.$tax_id
            ) : YAMONEY_API_DEFAULT_TAX_RATE_ID);

            $builder->addReceiptShipping($item['title'], $amount, $tax);
        }
    }

    return $builder;
}

/**
 * Implements hook_yamoney_api_shop_params_alter().
 *
 * @param $params
 */
function ya_ubercart_api_yamoney_api_shop_params_alter(&$params)
{
    // Selected payment method
    $params['paymentType'] = (variable_get('yamoney_api_paymode') == 'shop') ? $_SESSION['pay_method'] : '';
    $params['shop-desc']   = t('Payments for order No').$params['order_id'];
}

/**
 * Implements hook_yamoney_api_quick_params_alter().
 *
 * @param $params
 */
function ya_ubercart_api_yamoney_quick_params_alter(&$params)
{
    // Selected payment method
    $params['paymentType'] = @$_SESSION['pay_method'];
}

/**
 * @param $op
 * @param $order
 * @param null $form
 * @param null $form_state
 *
 * @return array|null
 */
function uc_payment_method_ya_ubercart_api($op, &$order, $form = array(), &$form_state = array())
{
    switch ($op) {
        case 'cart-details':
            $form     = array();
            $disabled = false;
            $methods  = yamoney_api_get_enabled_payment_methods();
            if (count($methods) === 1) {
                $disabled = true;
            }

            if (variable_get('yamoney_api_paymode') == 'shop' && variable_get('ya_payments_select', 1)) {
                $form['pay_method'] = array(
                    '#type'          => 'radios',
                    '#title'         => t('Select your payment type:'),
                    '#default_value' => isset($_SESSION['pay_method']) ? $_SESSION['pay_method'] : variable_get(
                        'yamoney_api_default_payment_method',
                        YAMONEY_API_DEFAULT_PAYMENT_METHOD
                    ),
                    '#prefix'        => '<div id="ym-payment_methods">',
                    '#options'       => $methods,
                    '#disabled'      => $disabled,
                    '#theme'         => 'form_radios_element',
                    '#ajax'          => array(
                        'callback' => 'ajax_payment_method_form_callback',
                        'method'   => 'replace',
                        'effect'   => 'fade',
                        'wrapper'  => 'ym-payment_methods',
                    ),
                );
            }
            unset($_SESSION['pay_method']);
            if (variable_get('yamoney_api_billing_enable', 0)) {
                $form                  = array();
                $form['customer_name'] = array(
                    '#type'     => 'textfield',
                    '#title'    => t('Payer\'s full name'),
                    '#required' => true,
                );

                return $form;
            } else {
                $form['pay_method'] = array(
                    '#type'          => 'radios',
                    '#title'         => t('Select your payment type:'),
                    '#default_value' => 'AC',
                    '#prefix'        => '<div id="ym-payment_methods">',
                    '#options'       => $methods,
                    '#disabled'      => $disabled,
                    '#theme'         => 'form_radios_element',
                    '#ajax'          => array(
                        'callback' => 'ajax_payment_method_form_callback',
                        'method'   => 'replace',
                        'effect'   => 'fade',
                        'wrapper'  => 'ym-payment_methods',
                    ),
                );

                return $form;
            }
            break;
        case 'cart-process':

            if (isset($form_state['values']['panes']['payment']['details']['pay_method'])) {
                $paymentMethod          = $form_state['values']['panes']['payment']['details']['pay_method'];
                $_SESSION['pay_method'] = $paymentMethod;
                if ($paymentMethod == 'alfabank') {
                    $_SESSION['alfabank_login'] = $_POST['alfabank_login'];
                } elseif ($paymentMethod == 'qiwi') {
                    $_SESSION['qiwi_phone'] = $_POST['qiwi_phone'];
                }
            }

            if (isset($form_state['values']['panes']['payment']['details']['customer_name'])) {
                $customerName = trim($form_state['values']['panes']['payment']['details']['customer_name']);
                $parts        = preg_split('/\s+/', $customerName);
                if ($customerName
                    && count($parts) != 3
                ) {
                    form_set_error('customer_name', 'Ф.И.О. плательщика введено не верно.');
                }
            }

            return;
            break;
        case 'settings':
            $form['yauc_settings'] = array(
                '#type'  => 'markup',
                '#value' => t('You shop ID. If you have any shops in you yandex account'),
            );

            return $form;
            break;
        case 'order-save':
            if (isset($_POST['panes']['payment']['details']['customer_name'])) {
                $customerName                 = $_POST['panes']['payment']['details']['customer_name'];
                $order->data['customer_name'] = $customerName;
                db_update('uc_orders')
                    ->fields(array('data' => serialize($order->data)))
                    ->condition('order_id', $order->order_id)
                    ->execute();
            }
            break;
    }
}

/**
 * Process successful payment to update Ubercart order.
 * Implements hook_yamoney_api_process_payment_alter().
 *
 * @param array $payment
 */
function ya_ubercart_api_yamoney_api_process_payment_alter(&$payment)
{
    /** @var YAMoneyApiTransaction $transaction */
    $transaction = $payment['transaction'];
    $order       = uc_order_load($transaction->order_id);
    if ($order) {
        //print_r($order);
        uc_cart_complete_sale($order);
        uc_cart_empty($order->uid);
        uc_order_update_status($order->order_id, 'payment_received');
        $payment['success'] = true;
    } else {
        $payment['success'] = false;
        $payment['error']   = 'Can not find order with id '.$transaction->order_id;
    }
}

function ya_ubercart_api_get_return_url($order)
{
    return url(
        'yamoney_api/ubercart/return',
        array(
            'absolute' => true,
            'query'    => array('orderId' => $order->order_id),
        )
    );
}

function ya_ubercart_api_theme()
{
    $items                                = array();
    $items['form_radio_element']          = array('render element' => 'element');
    $items['form_radios_element']         = array('render element' => 'element');
    $items['form_radio_element_external'] = array('render element' => 'element');

    return $items;
}

function ya_ubercart_api_theme_registry_alter(&$theme_registry)
{
    $theme_registry['form_radios_element']['function']         = "theme_ya_ubercart_api_form_radios_element";
    $theme_registry['form_radio_element']['function']          = "theme_ya_ubercart_api_form_radio_element";
    $theme_registry['form_radio_element_external']['function'] = "theme_ya_ubercart_api_form_radio_element_external";
}

function theme_ya_ubercart_api_form_radios_element($variables)
{
    $element = $variables['element'];

    if ($element['#value'] == 'alfabank') {
        $element['alfabank']['#theme'] = 'form_radio_element_external';
    } else if ($element['#value'] == 'qiwi') {
        $element['qiwi']['#theme'] = 'form_radio_element_external';
    }

    foreach (element_children($element) as $key) {

        if ($element[$key]['#theme'] !== 'form_radio_element_external') {
            $element[$key]['#theme'] = 'form_radio_element';
        }
        $element[$key]['#method_name'] = $element[$key]['#title'];
        $element[$key]['#title']       = '';
    }
    $items = drupal_render_children($element);

    return '<div '.drupal_attributes($element['#attributes']).'>'.$items.'</div>';
}

function theme_ya_ubercart_api_form_radio_element($variables)
{
    $element                        = $variables['element'];
    $element['#attributes']['type'] = 'radio';
    element_set_attributes(
        $element,
        array(
            'id',
            'name',
            '#return_value' => 'value',
        )
    );
    if (isset($element['#return_value']) && $element['#value'] !== false && $element['#value'] == $element['#return_value']) {
        $element['#attributes']['checked'] = 'checked';
    }
    _form_set_class($element, array('form-radio'));
    $output = '<input'.drupal_attributes($element['#attributes']).' />';
    $output .= '<label for="'.$element['#id'].'" class="option">'.$element['#method_name'].'</label>';

    return '<div class="form-item form-type-radio">'.$output.'</div>';
}

function theme_ya_ubercart_api_form_radio_element_external($variables)
{
    $element                        = $variables['element'];
    $element['#attributes']['type'] = 'radio';
    element_set_attributes(
        $element,
        array(
            'id',
            'name',
            '#return_value' => 'value',
        )
    );
    if (isset($element['#return_value']) && $element['#value'] !== false && $element['#value'] == $element['#return_value']) {
        $element['#attributes']['checked'] = 'checked';
    }
    _form_set_class($element, array('form-radio'));
    $output = '<input'.drupal_attributes($element['#attributes']).' />';
    $output .= '<label for="'.$element['#id'].'" class="option">'.$element['#method_name'].'</label>';

    if ($element['#value'] == 'alfabank') {
        $output .= '<div>';
        $output .= '<div>Укажите логин, и мы выставим счет в Альфа-Клике. После этого останется подтвердить платеж на сайте интернет-банка.</div>';
        $output .= '<input type="text" name="alfabank_login">';
        $output .= '</div>';
    } elseif ($element['#value'] == 'qiwi') {
        $output .= '<div>';
        $output .= '<div>Телефон, который привязан к Qiwi Wallet</div>';
        $output .= '<input type="text" name="qiwi_phone">';
        $output .= '</div>';
    }

    return '<div class="form-item form-type-radio">'.$output.'</div>';
}

function ajax_payment_method_form_callback($form, $form_state)
{
    $form_state['rebuild'] = true;
    if ($form['panes']['payment']['details']['pay_method']['#value'] == 'qiwi') {
        $form['panes']['payment']['details']['pay_method']['qiwi']['#theme'] = 'form_radio_element_external';
    } else if ($form['panes']['payment']['details']['pay_method']['#value'] == 'alfabank') {
        $form['panes']['payment']['details']['pay_method']['alfabank']['#theme'] = 'form_radio_element_external';
    }

    return $form['panes']['payment']['details']['pay_method'];
}


